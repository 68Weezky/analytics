<!DOCTYPE html>

<html  lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />

    <title><%= title %></title>

    <meta name="description" content="" />


 <!-- CALENDER CSS -->
    <!-- <link href="https://fonts.googleapis.com/css?family=Lato:300,400,700&display=swap" rel="stylesheet"> -->
	  <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"> -->
	  <link rel="stylesheet" href="/calender/css/style.css">
	  <link rel="stylesheet" href="/calender/css/bootstrap-datetimepicker.min.css">

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap"
      rel="stylesheet" />

    <link rel="stylesheet" href="/assets/vendor/fonts/boxicons.css" />

    <!-- Core CSS -->
    <link rel="stylesheet" href="/assets/vendor/css/core.css" class="template-customizer-core-css" />
    <link rel="stylesheet" href="/assets/vendor/css/theme-default.css" class="template-customizer-theme-css" />
    <link rel="stylesheet" href="/assets/css/demo.css" />
    <!-- Page CSS -->

    <link rel="stylesheet" href="https://unpkg.com/tachyons@4.12.0/css/tachyons.min.css"/>

   
    <!-- Helpers -->
    <script src="/assets/vendor/js/helpers.js"></script>
    <!--! Template customizer & Theme config files MUST be included after core stylesheets and helpers.js in the <head> section -->
    <!--? Config:  Mandatory theme config file contain global vars & default theme options, Set your preferred theme option in this file.  -->
    <script src="/assets/js/config.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
  </head>

  <body onload=checker(<%=JSON.stringify(season.goals)%>)> 
          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->

            <div class="container-xxl flex-grow-1 container-p-y" style="background: url('../../images/a.jpg') no-repeat center center fixed;background-size: cover;">
              <div class="row">
                <div class="col-lg-12 mb-4 order-0">
                  <div class="card bg-dark">
                    <div class="d-flex align-items-end row">
                      <div class="col-sm-7 text-sm-left">
                        <span class="d-lg-inline-block">
                          <img
                            src="/images/field-hockey.png"
                            height="140"
                            width="140"
                            alt="View Badge User"
                          />
                        </span>  
                          <span class="white d-lg-inline-block">
                              <b class="f1 f-headline i">
                                Masters
                              </b> 
                          </span>
                         
                      </div>                     
                    </div>

                </div>
                <%- include('../includes/userNav.ejs') %>
                </div>

          
                <div class="col-lg-6 col-md-12">
                  <div class="card tc">
                    <div class="card-header">
                    <h2>GOAL DISTRIBUTION</h2>
                    </div>
                    <div class="card-body mb-4">
                      <div id="pieChart1"></div>
                      <div class="mt-3">
                        <!-- Button trigger modal -->
                        <button type="button" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#pieChart1Ex" >
                          <span class="tf-icons bx bx-expand me-1"></span>
                          EXPLORE
                        </button>

                        <!-- Modal -->
                        <div class="modal fade" id="pieChart1Ex" tabindex="-1" style="display: none;" aria-hidden="true">
                          <div class="modal-dialog" role="document">
                            <div class="modal-content">
                              <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel1">Goal Distribution</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                              </div>
                              <div class="modal-body">
                                <div class="text-sm-left">
                                  <b>Categorize by:</b>
                                  <button id="sunburstTeam" class="btn btn-primary btn-sm">Teams</button>
                                  <button id="sunburstQ" class="btn btn-sm">Quarters</button>
                                </div>
                                <div id="pieChart2"></div>
                              </div>
                              <div class="modal-footer">
                                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">
                                  CLOSE
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                    </div>
                    </div>  
                </div>
                </div>
             
                  <div class="col-lg-6 order-1">
                    <div class="card mb-4">
                      <div class="card-header tc">
                        <h2>SCORE RANKINGS</h2>
                      </div>
                      <div class="card-body mb-4" style="height: 500px; ;overflow: hidden;">
                        <div class="card" style="overflow-y:auto ; max-height: 100%;">
                          <div class="table-responsive text-nowrap">
                            <table class="table" id="leagueTable" >
                              <thead>
                                <tr>
                                  <th>#</th>
                                  <th>Name</th>
                                  <th>Serial</th>
                                  <th>Team</th>
                                  <th>Goals</th>
                                </tr>
                              </thead>
                              <tbody class="table-border-bottom-0 " >
                                <% 
                                  let pos=0;let ref=1000;
                                  for(val of goalRank){
                                    if(val.goals<ref){
                                      pos+=1;
                                    }
                                    ref=val.goals
                                 %>
                                <tr>
                                  <td><%= pos %></td>
                                  <td><%= val.name %></td>
                                  <td><%= val.serial %></td>
                                  <td><%= val.team %></td>
                                  <td><%= val.goals %></td>
                                </tr>
                                <%}%>
                              </tbody>
                            </table>
                          </div>
                        </div>
                      </div>
                    </div>
    
      
                  </div>
    

                </div>  
  

              </div>
          
            <!-- / Content -->
            <div class="content-backdrop fade"></div>
          </div>  
          <!-- Content wrapper -->

     <!-- Core JS -->
    <!-- build:js assets/vendor/js/core.js -->

    <script src="/assets/vendor/libs/jquery/jquery.js"></script>
    <script src="/assets/vendor/libs/popper/popper.js"></script>
    <script src="/assets/vendor/js/bootstrap.js"></script>
    <script src="/assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.js"></script>
    <script src="/assets/vendor/js/menu.js"></script>

    <!-- endbuild -->

    <!-- Vendors JS -->
    <script src="/assets/vendor/libs/apex-charts/apexcharts.js"></script>

    <!-- Main JS -->
    <script src="/assets/js/main.js"></script>

    <!-- Page JS -->
    <script src="/assets/js/dashboards-analytics.js"></script>

    <!-- Place this tag in your head or just before your close body tag. -->
    <script async defer src="https://buttons.github.io/buttons.js"></script>

    <script>

      let checker=(x)=>{
      
        let data=x;
 
        var teamCounts = {};
      data.forEach(function(d) {
          if (d.team in teamCounts) {
              teamCounts[d.team]++;
          } else {
              teamCounts[d.team] = 1;
          }
      });

      var width = 400;
      var height = 400;
      var radius = Math.min(width, height) / 2;

      var svg = d3.select("#pieChart1").append("svg")
          .attr("width", width)
          .attr("height", height)
          .append("g")
          .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

      var color = d3.scaleOrdinal()
          .domain(Object.keys(teamCounts))
          .range(d3.schemeCategory10);

      var pie = d3.pie()
          .value(function(d) { return d[1]; });
      var data_ready = pie(Object.entries(teamCounts));

      var arc = d3.arc()
          .innerRadius(radius/2)
          .outerRadius(radius);

      var slices = svg.selectAll('path')
          .data(data_ready)
          .enter()
          .append('g')
          .attr('class', 'slice');

      slices.append('path')
          .attr('d', arc)
          .attr('fill', function(d) { return color(d.data[0]); })
          .attr("stroke", "white")
          .style("stroke-width", "2px");

      slices.append('text')
          .attr('transform', function(d) { return 'translate(' + arc.centroid(d) + ')'; })
          .attr('dy', '.35em')
          .attr('text-anchor', 'middle')
          .style('font-size', '14px')
          .text(function(d) { return d.data[0]; });

      svg.selectAll('.count-label')
          .data(data_ready)
          .enter()
          .append('text')
          .attr('class', 'count-label')
          .text(function(d){ return d.data[1]; })
          .attr('transform', function(d) { return 'translate(' + arc.centroid(d) + ')'; })
          .attr('dy', '1.5em')
          .attr('text-anchor', 'middle')
          .style('font-size', '16px');
// THIS 
// IS 
// THE 
// SWITCH
    let sunburst="Team";
    let teamBtn=document.getElementById("sunburstTeam");
    let quarterBtn=document.getElementById("sunburstQ");
    teamBtn.addEventListener('click',x=>{
      sunburst="Team"
      teamBtn.classList.add('btn-primary')
      quarterBtn.classList.remove("btn-primary")
      document.getElementById("pieChart2").innerHTML=""
      pieChart2(data)
    })

    quarterBtn.addEventListener('click',x=>{
      sunburst="Quarter"
      quarterBtn.classList.add('btn-primary')
      teamBtn.classList.remove("btn-primary")
      document.getElementById("pieChart2").innerHTML=""
      pieChart2(data)
    })

    let pieChart2=(data)=>{
      function organizeDataByTeam(data) {
        const teams = {};

        // Iterate over the data and organize it by team
        data.forEach(entry => {
            const { team, time, player, type, match } = entry;
            
            // If the team doesn't exist in the teams object, create it
            if (!teams[team]) {
                teams[team] = {
                    name: team,
                    children: []
                };
            }

            // Find the team object
            const teamObject = teams[team];

            // Check if there's already a child with the same player name
            let playerNode = teamObject.children.find(playerNode => playerNode.name === player);

            // If player doesn't exist, create a new player node
            if (!playerNode) {
                playerNode = {
                    name: player,
                    children: []
                };
                teamObject.children.push(playerNode);
            }

            // Find or create a child node with the given type
            let typeNode = playerNode.children.find(typeNode => typeNode.name === type);
            if (!typeNode) {
                typeNode = {
                    name: type,
                    children: []
                };
                playerNode.children.push(typeNode);
            }

            // Add the time to the type node
            typeNode.children.push({ name:`Match${match}`,value:1 });
        });

        // Convert the teams object to an array of team objects
        const teamsArray = Object.values(teams);
        return teamsArray;
    }

     function organizeDataByQuarter(data) {
    const quarters = {};

    // Iterate over the data and organize it by team
    data.forEach(entry => {
        const { team, time, player, type, match } = entry;
        let quarter;
        if(time<=15){
            quarter=1
        }else if(time<=30){
            quarter=2
        }else if(time<=45){
            quarter=3
        }else{
            quarter=4
        }
        // If the quarter doesn't exist in the quarters object, create it
        if (!quarters[quarter]) {
            quarters[quarter] = {
                name: quarter,
                children: []
            };
        }

        // Find the quarter object
        const quarterObject = quarters[quarter];

         // Check if there's already a child with the same team name
         let teamNode = quarterObject.children.find(teamNode => teamNode.name === team);

          // If team doesn't exist, create a new team node
        if (!teamNode) {
            teamNode = {
                name: team,
                children: []
            };
            quarterObject.children.push(teamNode);
        }


        // Check if there's already a child with the same player name
        let playerNode = teamNode.children.find(playerNode => playerNode.name === player);

        // If player doesn't exist, create a new player node
        if (!playerNode) {
            playerNode = {
                name: player,
                children: []
            };
            teamNode.children.push(playerNode);
        }

        // Find or create a child node with the given time
        let timeNode = playerNode.children.find(timeNode => timeNode.name === `Minute${time}`);
        if (!timeNode) {
            timeNode = {
                name: `Minute${time}`,
                children: []
            };
            playerNode.children.push(timeNode);
        }

        // Add the type to the time node
        timeNode.children.push({ name:type,value:1 });
    });

    // Convert the teams object to an array of team objects
    const quartersArray = Object.values(quarters);
    return quartersArray;
}
      
      let dat;
      if(sunburst=="Team"){
        dat = organizeDataByTeam(data);
      }else if(sunburst=="Quarter"){
        dat = organizeDataByQuarter(data);
      }

      const data2 = {
          name: sunburst,
          children: dat
      };
      //CREATING SVG
        const width = 400;
        const height = width;
        const radius = width / 6;

        const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data2.children.length + 1));

        const hierarchy = d3.hierarchy(data2)
            .sum(d => d.value)
            .sort((a, b) => b.value - a.value);
        const root = d3.partition()
            .size([2 * Math.PI, hierarchy.height + 1])
          (hierarchy);
        root.each(d => d.current = d);

        const arc = d3.arc()
            .startAngle(d => d.x0)
            .endAngle(d => d.x1)
            .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))
            .padRadius(radius * 1.5)
            .innerRadius(d => d.y0 * radius)
            .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1))

        const svg = d3.create("svg")
            .attr("viewBox", [-width / 2, -height / 2, width, width])
            .style("font", "8px sans-serif");

        const path = svg.append("g")
          .selectAll("path")
          .data(root.descendants().slice(1))
          .join("path")
            .attr("fill", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })
            .attr("fill-opacity", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)
            .attr("pointer-events", d => arcVisible(d.current) ? "auto" : "none")
            .attr("d", d => arc(d.current));

        path.filter(d => d.children)
            .style("cursor", "pointer")
            .on("click", clicked);

        const format = d3.format(",d");
        path.append("title")
            .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${format(d.value)}`);

        const label = svg.append("g")
            .attr("pointer-events", "none")
            .attr("text-anchor", "middle")
            .style("user-select", "none")
          .selectAll("text")
          .data(root.descendants().slice(1))
          .join("text")
            .attr("dy", "0.35em")
            .attr("fill-opacity", d => +labelVisible(d.current))
            .attr("transform", d => labelTransform(d.current))
            .text(d => d.data.name);

        const parent = svg.append("circle")
            .datum(root)
            .attr("r", radius)
            .attr("fill", "none")
            .attr("pointer-events", "all")
            .on("click", clicked);

        function clicked(event, p) {
          parent.datum(p.parent || root);

          root.each(d => d.target = {
            x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
            x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
            y0: Math.max(0, d.y0 - p.depth),
            y1: Math.max(0, d.y1 - p.depth)
          });

          const t = svg.transition().duration(1000);

          path.transition(t)
              .tween("data", d => {
                const i = d3.interpolate(d.current, d.target);
                return t => d.current = i(t);
              })
            .filter(function(d) {
              return +this.getAttribute("fill-opacity") || arcVisible(d.target);
            })
              .attr("fill-opacity", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)
              .attr("pointer-events", d => arcVisible(d.target) ? "auto" : "none") 
              .attrTween("d", d => () => arc(d.current));

          label.filter(function(d) {
              return +this.getAttribute("fill-opacity") || labelVisible(d.target);
            }).transition(t)
              .attr("fill-opacity", d => +labelVisible(d.target))
              .attrTween("transform", d => () => labelTransform(d.current));
        }

        function arcVisible(d) {
          return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;
        }

        function labelVisible(d) {
          return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;
        }

        function labelTransform(d) {
          const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
          const y = (d.y0 + d.y1) / 2 * radius;
          return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
        }

        const chart = svg.node();
        document.getElementById('pieChart2').appendChild(chart);
      
    }

    pieChart2(data)
    }


 
  </script>
  </body>
</html>
